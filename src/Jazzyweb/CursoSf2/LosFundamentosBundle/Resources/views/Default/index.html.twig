{% extends 'JCSf2TemplatesBundle::layout.html.twig' %}

{% block container %}
<h1>Introducción</h1>

<h2>Material del Curso</h2>

<h3>Documentos</h3>
<ul>
    <li>La <a target="_blank" href="https://github.com/juanda/CursoSf2">guía del curso</a> (esto que estamos leyendo ahora mismo)</li>
    <li><a target="_blank" href="http://juandarodriguez.es/.~~cursosf20~~/">El curso</a>: "Desarrollo de Aplicaciones Web Con Symfony2</li>
    <li><a target="_blank" href="http://symfony.com/doc/current/book/index.html">La documentación oficial</a></li>
</ul>

<h3>Aplicaciones</h3>

<ul>
    <li>La propia <a target="_blank" href="https://github.com/juanda/CursoSf2">guía del curso</a> es también una aplicación Symfony2 
        con snnipets de código para ilustrar los distintos temas que se tratan.
    </li>
    <li>
        La aplicación <a target="_blank" href="https://github.com/juanda/AlimentosPHP">AlimentosPHP</a>, construida en PHP crudo y
        que se desarrolla como ejemplo de aplicación MVC en la unidad 2 del curso;
    </li>
    Las aplicaciones <a target="_blank" href="https://github.com/juanda/AlimentosApp">AlimentosApp</a> y <a target="_blank" href="https://github.com/juanda/MentorNotasApp">MentorNotasApp</a> son dos aplicaciones Symfony2 que se
    desarrollan en el <a target="_blank" href="http://juandarodriguez.es/.~~cursosf20~~/">curso</a>.
</li>
</li>

</ul>

<h2>El Patrón de diseño Modelo-Vista-Controlador</h2>

<p>
    Es un patrón útil en aplicaciones en las que se requiere interacción con 
    el usuario a través de una GUI.
</p>
<ul>
    <li>
        El Controlador. En este artefacto se incluye todo lo referente a la lógica de control de la
        aplicación, que no tiene nada que ver con las características propias del negocio para el que se está construyendo la aplicación. En el caso de una aplicación web, un ejemplo sería la manipulación de la request HTTP.

    </li>
    <li>
        El Modelo. Donde se implementa todo lo relativo a la lógica de negocio, es decir, los aspectos particulares del problema que la aplicación resuelve. Si, por ejemplo estamos desarrollando un blog, un ejemplo sería una librería de funciones para la gestión de los comentarios.
    </li>
    <li>
        La Vista. Aquí se ubica el código encargado de “pintar” el resultado de los procesos de la aplicación. En una aplicación web la vista se encarga de producir documentos HTML, XML, JSON, etcétera, con los datos que se hayan calculado previamente en la aplicación.

    </li>
</ul>
<p>
    <img src="{{ asset('bundles/jcsf2fundamentos/img/mvc.png') }}"/>
</p>

<h3>Elementos típicos de aplicaciones PHP que implementan este patrón</h3>

<ul>
    <li>
        El controlador frontal. Procesa todas las request, carga la configuración, realiza las tareas de inicialización (bootstraping), interpreta la request y elige la acción que se debe procesar.
    </li>
    <li>
        Los controladores o acciones. Implementan cada una de las funcionalidades de la aplicación. Cada acción se asocia con una ruta. Se apoyan en el Modelo para obtener los datos y usan una plantilla para pintarlos.
    </li>
    <li>
        Las plantillas. Son archivos mediante los cuales se pueden generar dinámicamente ficheros de texto en distintos formatos (HTML, JSON, XML ...)
    </li>
    <li>
        Clases del modelo. Librerías que implementan la lógica de negocio de la aplicación.
    </li>
</ul>



<div class="alert">
    <p>
        Una posible implementación del patrón para una aplicación web típica construida
        con PHP puede verse <a href="http://juandarodriguez.es/.~~cursosf20~~/unidad2.html">aquí</a>
    </p>
</div>

<h2>Qué es Symfony2</h2>

<ul>
    <li>
        Es un conjunto de <a href="http://symfony.com/doc/current/components/index.html">componentes</a> desacoplados concebidos para el desarrollo
        de aplicaciones web en el servidor.

    </li>
    <li>
        Es un <a href="http://symfony.com/doc/current/book/index.html">framework</a> de desarrollo de aplicaciones web construido con los 
        anteriores componentes.
    </li>
</ul>

<p>
    En Symfony2, todo el código de la aplicación se organiza en los denominados <b>bundles</b>.

    Un bundle no es más que un directorio que aloja todo aquello relativo a una funcionalidad determinada.
    Puede incluir clases PHP, plantillas, configuraciones, CSS’s y Javascript.
</p>

<h2>Ejemplos de aplicaciones construidas en Symfony2</h2>

<ul>
    <li>
        <a href="http://juandarodriguez.es/.~~cursosf20~~/unidad3.html">Aquí</a> puedes ver como se desarrolla la aplicación de información de alimentos
        que hemos visto antes con Symfony2. El código lo puedes encontrar <a href="https://github.com/juanda/AlimentosApp">aquí (github)</a>
    </li>
    <li>
        La aplicación <a href="https://github.com/juanda/MentorNotasApp">MentorNotas</a> desarrollada en el texto del curso completo de Symfony2
    </li>

</ul>
<div class="alert">
    <p>

    </p>
</div>

<h1>Instalación y estructura</h1>

<h2>Instalación</h2>

<p>
    La edición standard del framework Symfony2 se distribuye como una aplicación completamente funcional, de manera
    que desde el principio tenemos toda la estructura de directorios del framework y, además,
    un bundle de ejemplo (AcmeDemoBundle) para poder echar un primer vistazo al funcionamiento
    del framework. 
</p>

<p>
    La obtención del código se puede hacer de 3 formas distintas:
</p>

<ul>
    <li>
        Descargando desde <a href="http://symfony.com/download"> esta página</a> una versión
        completa (con vendors, es decir con las librerías de tercero).               
    </li>
    <li>
        Descargando desde <a href="http://symfony.com/download"> esta página</a> una versión
        sin librerías de tercero.
    </li>
    <li>
        Utilizando la herramienta <b>composer</b>
    </li>
</ul>

<p>
    Las dos últimas opciones añaden algo de flexibilidad a la gestión del proyecto.
    En estos dos últimos casos el sistema debe contar con las herramientas <i>git</i>
    y <i>composer.phar</i>
</p>

<p>
    Si se está trabajando en un entorno de desarrollo lo más fácil es desplegar el
    código en un directorio accesible al web server (dentro del DocumentRoot), y
    acceder a la aplicación través de la URL:
</p>

<div class="alert">
    <a href="http://localhost/CursoSf2/web/app_dev.php/">http://localhost/CursoSf2/web/app_dev.php/</a>
</div>

<p>
    Pero para un entorno de producción, la solución anterior no es apropiada. En este caso hay
    que hacer que el DocumentRoot de nuestro servidor web o el de algún VirtualHost, apunte a
    la carpeta <i>web</i> del proyecto.
</p>

<p>
    El siguiente código muestra una posible configuración para añadir un VirtualHost a <i>apache</i>,
    con reescritura del controlador frontal, de manera que no es necesario indicar este en las URL's 
    de la aplicación. Es importante tener activado el modulo rewrite de apache para que esto funcione.
</p>

<pre>
&lt;VirtualHost *:80&gt;
    ServerName     cursosf2.lan

    DocumentRoot    "/home/juanda/sites/CursoSf2/web/"
    DirectoryIndex  app.php

    &lt;Directory "/home/juanda/sites/CursoSf2/web/"&gt;
        AllowOverride None
        Allow from All

        &lt;IfModule mod_rewrite.c&gt;
                RewriteEngine On

                RewriteCond %{ENV:REDIRECT_STATUS} ^$
                RewriteRule ^app\.php(/(.*)|$) %{CONTEXT_PREFIX}/$2 [R=301,L]

                RewriteCond %{REQUEST_FILENAME} -f
                RewriteRule .? - [L]

                RewriteCond %{REQUEST_URI}::$1 ^(/.+)(.+)::\2$
                RewriteRule ^(.*) - [E=BASE:%1]
                RewriteRule .? %{ENV:BASE}app.php [L]
        &lt;/IfModule&gt;

    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</pre>

<div class="alert">
    <a href="{{ path('_welcome') }}">Aquí</a> puedes acceder a la demo que viene incluida en 
    la distribución standard de Symfony2 en el bundle AcmeDemoBundle.
</div>

<h1></h1>

{% endblock %}

