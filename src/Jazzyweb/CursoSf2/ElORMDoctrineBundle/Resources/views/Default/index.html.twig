{% extends 'JCSf2TemplatesBundle::layout.html.twig' %}

{% block container %}
<h1>El ORM Doctrine</h1>

<ul>
    <li>
        <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/index.html">Documentación oficial</a>
    </li>
    <li>
        <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html">Documentación oficial sobre anotaciones</a>
    </li>
</ul>

<h2>El concepto</h2>

<p>
    <img src="{{ asset('bundles/jcsf2ormdoctrine/images/doctrine_image_1.png') }}" />
</p>

<h2>Generación de las entidades</h2>

<p>
    Generamos dos entidades: <code>JCSf2FundamentosBundle:Actor</code> y <code>JCSf2FundamentosBundle:Pelicula</code>
</p>

<pre>
# php app/console generate:doctrine:entity
</pre>

<p>
    Repasamos el código generado y lo completamos con nuestras necesidades <code>(nullable="true")</code>. Ya tenemos entidades y metadatos.
</p>

<h2>Creación de la base de datos</h2>

<p>
    Configuramos parametros de conexión a BD en <code>app/config/parameters.yml</code>. Ten en cuenta que estos
    parámetros donde se utilizan realmente es en la sección <code>doctrine</code>  de <code>app/config/config.yml</code>
</p>

<pre>
# php app/console doctrine:database:create

# php app/console doctrine:schema:create
</pre>

<p>
    Cuando queramos actualizar la base de datos por que hayamos realizado cambios en los metadatos:
</p>

<pre>
# php app/console doctrine:schema:update
</pre>

<p>
    Aún no hemos terminado, quedan las relaciones, pero ya podemos ver el funcionamiento básico del ORM.
</p>

<h2>Persistir objetos</h2>

<p>
    Para persistir un objetos que sea instancia de alguna de nuestras entidades se utiliza el servicio de persistencia
    de Doctrine. Basta con pasarle como argumento el objeto que deseamos persistir al método <code>persist</code> del
    servicio. Es importante recordar que la persistencia no se hace efectiva hasta que no se llame al método
    <code>flush()</code> del servicio. Este último método debería llamarse una sola vez cuando hayamos "encolado"
    todas solicitudes de persistencia de nuestros objetos.
</p>

<p>
    Aquí puedes la persistencia de objetos en acción. El código involucrado en este ejemplo es:
</p>
<ul>
    <li>
        La entidad <code>Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Actor</code>, ya que es un objeto
        plano de este tipo el que queremos persistir.
    </li>
    <li>
        El Controlador <code>JCSf2ORMDocrineBundle:Default:persitir</code> 
    </li>
    <li>
        La plantilla <code>JCSf2ORMDocrineBundle:Default:persitir.html.twig</code>
    </li>
</ul>

<div class="alert">
    <a href="{{ path('jc_sf2_orm_doctrine_persistir') }}">Persistencia en funcionamiento</a>
</div>

<h2>Recuperación y modificación de objetos</h2>

<p>
    Para modificar un objeto existente, primero hay que recuperarlo de la base de datos.
    Una vez que lo tengamos lo podemos modificar mediante sus setters y persistirlo de nuevo
    de la misma forma que lo hicimos antes.
</p>

<p>
    Aquí puedes ver la modificación de objetos en acción. El código involucrado en este ejemplo es:
</p>
<ul>
    <li>
        La entidad <code>Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Actor</code>, ya que es un objeto
        plano de este tipo el que queremos modificar.
    </li>
    <li>
        El Controlador <code>JCSf2ORMDocrineBundle:Default:modificar</code> 
    </li>
    <li>
        La plantilla <code>JCSf2ORMDocrineBundle:Default:modificar.html.twig</code>
    </li>
</ul>

<div class="alert">
    <a href="{{ path('jc_sf2_orm_doctrine_modificar') }}">Modificación de objetos en funcionamiento</a>
</div>

<h2>El repositorio</h2>

En el código que hemos propuesto para recuperar y modificar un objeto se utiliza un concepto de Doctrine
denominado <b>repositorio</b>.  Cada entidad tiene su repositorio, el cual no es más que una clase que
contiene métodos para recuperar colecciones de objetos de esa entidad. Doctrine ofrece una serie de métodos
muy útiles:


<ul>
    <li>
        <code>find($id)</code>,recupera el objeto con el <code>id</code> especificado por el argumento.
    </li>
    <li>
        <code>findOneBy{Atributo}($valor)</code> recupera en primer objeto que tienen como <code>Atributo</code> el 
        parámetro pasado en el argumento. Por ejemplo, <code>findOneByNombre("JOHN")</code> recuperaria
        el primer actor con nombre JOHN.
    </li>
    <li>
        <code>findBy{Atributo}($valor)</code> recupera en un <code>ArrayCollection</code> todos los objetos
        que tienen como <code>Atributo</code> el parámetro pasado en el argumento.
    </li>
    <li>
        <code>findAll()</code> recupera todos los objetos.
    </li>
</ul>

<p>
    No obstante, es muy probable que nuestra aplicación tenga necesiades más sofisticadas para la 
    consulta y recuperación de objetos. Podemos, entonces, ampliar el repositorio con nuestros propios
    métodos. Lo veremos más adelante.
</p>

<h2>Asociaciones entre objetos y mapeo en la base de datos</h2>

<p>Las entidades de Doctrine admiten los siguientes tipos de relaciones entre objetos:</p>

<ul>
    <li>OneToOne</li>
    <li>OneToMany y ManyToOne</li>
    <li>ManyToMany</li>
</ul>

<p>
    Cada una de estos tipos de relaciones puede ser:
</p>

<ul>
    <li>
        Unidireccional, cuando solo uno de los objetos de la relación implementa métodos para
        acceder al otro.
    </li>
    <li>
        Bidireccional, cuando los dos objetos de la relación implementan métodos para acceder 
        al otro.
    </li>
    <li>
        Autoreferente, cuando los dos objetos de la relación pertenecen a la misma clase.
    </li>
</ul>

<p>
    Como en las bases de datos relacionales tan solo existe la relación OneToMany-ManyToOne,
    Doctrine mapea las relaciones de la siguiente manera:
</p>
<ul>
    <li>
        OneToOne entre objetos como OneToMany-ManyToOne en base de datos, controlando que la clave 
        foránea en una de las tablas no se repita.
    </li>
    <li>
        OneToMany-ManyToOne entre objetos como OneToMany-ManyToOne en base de datos.
    </li>
    <li>
        ManyToMany entre objetos mediante una tabla intermedia con claves foráneas a cada una de las tablas
        que modela cada objeto.
    </li>
</ul>

<p>
    Respecto a la direccionalidad, es un concepto propio del mundo de los objetos y no tiene
    cabida en el espacio de la base de datos, por lo que es algo que no se mapea.
</p>
<p>
    De cara al mapeo de las asociaciones entre objetos en la base de datos y a la persistencia de 
    los mismos, cuando la asociación es bidireccional, Doctrine denomina a uno de los objetos 
    <b>parte propietaria</b> y al otro <b>parte inversa</b>. En el caso de asociaciones unidireccionales
    Doctrine tan sólo establece la parte propietaria.
</p>

<p>
    Las reglas que hemos de tener en cuenta para reconocer la parte propietaria y la inversa son las 
    siguientes:
</p>

<ul>
    <li>
        En las asociaciones unidirecionales, sólo hay parte propietaria y es aquella que implementa
        los métodos de acceso al objeto asociado. También es la única que define reglas de mapeo.
    </li>
    <li>
        En las asociaciones bidireccionales:
        <ul>
            <li>
                Si la relación es OneToOne, la parte propietaria será aquella que, en la base de datos,
                posea la clave foránea que la relaciona con la otra parte. De manera que podemos elegir
                nosotros la que queramos.
            </li>
            <li>
                Si la relación es ManyToMany, igual que antes, la parte propietaria es la que decidamos 
                nosotros. Hay que resaltar que como la asociación ManyToMany se mapea en la base de datos
                mediante una tabla intermedia, ninguna de las tablas correspondientes a la entidad posee 
                la clave.                 
            </li>
            <li>
                Si la relación es OneToMany-ManyToOne, la parte propietaria es siempre la ManyToOne, ya
                que, en la base de datos, es la que posee la clave foránea. 
            </li>
        </ul>
    </li>
</ul>

<p>
    En los tres casos, la selección de la parte propietaria se realiza en los metadatos de mapeo.
</p>

<p>
    Los tres tipos de asociaciones combinada con la direccionalidad de las mismas da lugar a los siguientes
    casos:
</p>

<ul>
    <li>OneToMany unidireccional</li>
    <li>OneToMany bidireccional</li>
    <li>OneToMany autoreferente</li>
    <li>ManyToOne unidireccional</li>
    <li>OneToMany unidireccional</li>
    <li>OneToMany-ManyToOne bidireccional</li>
    <li>OneToMany-ManyToOne autoreferente</li>
    <li>ManyToMany unidireccional</li>
    <li>ManyToMany bidireccional</li>
    <li>ManyToMany autoreferente</li>
</ul>
<p>
    Aquí puedes encontrar la 
    <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html">Documentación oficial sobre asociaciones</a>
</p>

<p>
    A continuación vamos a explicar como se especifican las relaciones unidireccionales y
    bidireccionales. Si quieres saber como se trabaja con las autoreferentes puedes consultar el documento
    anterior.
</p>

<h3>OneToOne unidireccional</h3>

<p>
    Ejemplo: Asociación Persona-NIF, unidirecional desde persona hasta NIF, es decir,
    que será la entidad Persona la que implemente métodos para acceder al NIF, pero no al revés.
</p>

<p>
    Primero debemos crear las entidades Persona y NIF, para lo que podemos usar el generador
    de entidades <code>php app/console generate:doctrine:entitity</code>.
</p>

<p>
    Añadimos a la entidad Persona un atributo <code>$nif</code> con los siguientes metadatos de mapeo:
</p>

<pre>
/**
 * @ORM\OneToOne(targetEntity="NIF")
 * @ORM\JoinColumn(name="nif_id", referencedColumnName="id")
 */
 private $nif;
</pre>

<p>
    Y listo, no hay que tocar la entidad NIF para nada, puesto que la asociación es unidireccional
    desde Persona a NIF.
</p>

<p>
    Como hemos modificado la entidad Persona hay que reconstruir la entidades para que se añadan 
    los getters y setters del atributo <code>$nif</code>. Usamos <code>php app/console generate:doctrine:entities JCSf2ELORMDoctrineBundle</code>
</p>

<p>
    Como consecuencia de la esta operación se han creado los métodos <code>setNIF()</code> y <code>setNIF</code>
</p>

<p>
    También hay que actualizar la base de datos para que se establezca la correspondiente asociación entre las tablas.
    <code>php app/console doctrine:schema:update --force</code>
</p>

<p>
    Como consecuencia de esta operación se han creado (o actualizado) las tablas Persona y NIF, incorporando
    la primera una clave foránea <code>nif_id</code> hacia la tabla NIF.
</p>

<h3>OneToOne bidireccional</h3>

<p>
    Ejemplo: Asociación Persona-NIF, bidirecional con Persona como parte propietaria, es decir,
    que será la entidad Persona la que posea la clave foránea.
</p>

<p>
    Añadimos a la entidad Persona un atributo <code>$nif</code> con los siguientes metadatos de mapeo:
</p>

<pre>
/**
 * @ORM\OneToOne(targetEntity="NIF", inversedBy="persona")
 * @ORM\JoinColumn(name="nif_id", referencedColumnName="id")
 */
 private $nif;
</pre>

<p>
    Y en la entidad NIF añadimos un atributo <code>$persona</code> con los siguientes metadatos de mapeo:
</p>

<pre>
/**
 * @ORM\OneToOne(targetEntity="Persona", mappedBy="nif")
 */
 private $persona;
</pre>

<p>
    Fíjate en que se ha añadido una opción <code>inversedBy</code> en la parte propietaria y una opción
    <code>mappedBy</code> en la parte inversa. Cada una de estas opciones indica el nombre del atributo que,
    en la otra parte, referencia a la entidad en cuestión. 
</p>

<p>
    También es importante percatarse de que es la parte propietaria la que define la clave foránea.
</p>

<p>
    Al regenerar los getters y setters de estas entidades, comprobamos que en la entidad NIF aparecen
    los métodos <code>getPersona()</code> y <code>setPersona</code>. Estableciéndose la bidireccionalidad.
</p>

<p>
    Sin embargo, al actualizar la base de datos comprobamos que no sufre ningún cambio. La razón es que
    el concepto de direccionalidad es propio de las entidades, no de la base de datos. Esta última
    no "sabe" que significa una asociación uni o bidireccional.
</p>

<h3>ManyToOne unidireccional</h3>

<p>
    Ejemplo: Persona-Dirección, de manera que en una casa puedan vivir varias personas, y
    una persona tan sólo pueda vivir en una casa. Además queremos que Persona implemente los
    métodos de acceso a Dirección. Es decir que persona sea la parte propietaria.
</p>

<p>
    Según hemos expuesto antes en las reglas que Doctrine aplica sobre cada una de las partes,
    en una relación OneToMany-ManyToOne, la parte ManyToOne es siempre la propietaria. 
    Observa que es precisamente lo que sucede en este caso: Persona es la parte ManyToOne.
</p>

<p>
    Primero debemos crear la entidad Direccion, para lo que podemos usar el generador de 
    entidades php app/console generate:doctrine:entitity.
</p>

<p>
    Añadimos a la entidad Persona un atributo <code>direccion</code> con los siguientes metadatos de mapeo:
</p>

<pre>
/**
 * @ORM\ManyToOne(targetEntity="Direccion")
 * @ORM\JoinColumn(name="direccion_id", referencedColumnName="id")
 * */
 private $direccion;
</pre>

<p>
    Y listo, no hay que tocar la entidad Direccion para nada, puesto que la asociación es
    unidireccional desde Persona a Direccion.
</p>

<p>
    Reconstruimos las entidades y obsevamos que aparecen en la entidad Persona los métodos
    <code>getDireccion()</code> y <code>setDireccion()</code>.
</p>

<p>
    Al actualiza la base de datos, además de crearse la tabla Direccion, se añade una clave
    foránea <code>direccion_id</code> a la tabla Persona, que la relaciona con la tabla Direccion.
</p>

<h3>OneToMany unidireccional</h3>

<p>
    Ejemplo: Persona-Telefono, de manera que una persona tiene varios teléfonos, pero cada teléfono
    sólo pueda pertenecer a una persona. La parte propietaria será persona.
</p>

<p>
    Este caso plantea un problema: las reglas de Doctrine que hemos mencionado más arriba declaran
    rotundamente que en una relación OneToMany-ManyToOne la parte propietaria es la ManyToOne. 
    El caso que estamos tratando establece como parte propietaria la parte OneToMany. Así que, en
    principio, Doctrine no resuelve este caso. 
</p>

<p>
    La solución que propone Doctrine es utilizar, en lugar de una asociación OneToMany-ManyToOne, una
    ManyToMany en la que se establezca a única la clave foránea que apunta a la parte inversa (Many). 
    Así, dado que en una asociación ManyToMany podemos elegir cualquier entidad como parte propietaria,
    queda resuelto el problema. Veámos como se hace en la práctica.
</p>

<p>
    Creamo la entidad teléfono.
</p>

<p>
    Añadimos a la entidad Persona un atributo <code>$telefonos</code> con los siguientes metadatos de mapeo:
</p>

<pre>
/**
 * @ORM\ManyToMany(targetEntity="Telefono")
 * @ORM\JoinTable(name="persona_telefono",
 *      joinColumns={@ORM\JoinColumn(name="persona_id", referencedColumnName="id")},
 *      inverseJoinColumns={@ORM\JoinColumn(name="telefono_id", referencedColumnName="id", unique=true)}
 *      )
 **/
    private $telefonos;
</pre>

<p>
    Dado que la asociación es unidireccional, no hay que todar la parte no propietaria (teléfono).
</p>

<p>
    Regeneramos las entidades y actualizamos la base de datos. Observamos que en la entidad Persona
    aparecen los métodos <code>addTelefono()</code> (singular), <code>removeTelefono()</code> (singular) y 
    <code>getTelefonos()</code> (plural).
    Además, en la base de datos se ha creado la tabla Telefono y una tabla intermedia persona_telefono con
    claves foráneas a Persona y Telefono. Además la clave foránea a Teléfono debe ser única, para 
    ganantizar la relación OneToMany desde Persona a Telefono.
</p>

<p>
    Observa también que se ha creado un constructor de la clase Persona, en el que se inicializa el
    atributo <code>telefonos</code> como un <code>ArrayCollection</code>, que es un tipo de array
    propio de Doctrine que soporta ciertas operaciones que el ORM necesita:
</p>

<pre>
public function __construct()
{
        $this->telefonos = new \Doctrine\Common\Collections\ArrayCollection();
}
</pre>

<h3>OneToMany-ManyToOne bidireccional</h3>

<p>
    Ejemplo: Persona-Dirección, de manera que en una casa puedan vivir varias personas, y
    una persona tan sólo pueda vivir en una casa. Además queremos que tanto Persona como Direccion
    implementen métodos de acceso, es decir, que la asociación sea bidireccional.
</p>

<p>
    Añadimos a la parte propietaria (Persona) el atributo <code>$direccion</code> con los siguientes
    metadatos:
</p>

<pre>
/**
 * @ORM\ManyToOne(targetEntity="Direccion", inversedBy="personas")
 * @ORM\JoinColumn(name="direccion_id", referencedColumnName="id")
 * */
 private $direccion;
</pre>

<p>
    Es igual que en el caso unidireccional pero especificando el atributo <code>inversedBy</code>, es decir
    el nombre del atributo en la otra parte (Direccion) que hace referencia a la clase Persona.
</p>

<p>
    En la clase Direccion añadimos el atributo <code>$personas</code> con los siguientes metadatos:
</p>

<pre>
/**
 * @ORM\OneToMany(targetEntity="Persona", mappedBy="direccion")
 **/
 private $personas;
</pre>

<p>
    La opción <code>mappedBy</code> indica el nombre del atributo en la otra parte (Persona) que
    hace referencia a la entidad Direccion.
</p>

<p>
    Regeneramos las entidades y aparecen en la clase Direccion los métodos <code>addPersona()</code> y
    <code>getPersonas()</code>.
</p>

<p>
    Sin embargo al actualizar la base de datos no se produce ningún cambio. Recuerda, la base de datos
    no sabe nada acerca del concepto de direccionalidad.
</p>

<h3>ManyToMany unidireccional</h3>

<p>
    Ejemplo: Actor-Pelicula, de manera que un actor pueda aparecer en varias películar y en una película
    puedan intervenir varios actores. Queremos que la relación ser unidireccional siendo Actor la entidad que
    implemente los métodos de acceso a Pelicula.
</p>

<p>
    En la entidad Actor añadimos el atributo <code>$peliculas</code> con los siguientes metadatos de mapeo:
</p>

<pre>
/**
 * @ORM\ManyToMany(targetEntity="Pelicula")
 * @ORM\JoinTable(name="actor_pelicula",
 *      joinColumns={@ORM\JoinColumn(name="actor_id", referencedColumnName="id")},
 *      inverseJoinColumns={@ORM\JoinColumn(name="pelicula_id", referencedColumnName="id")}
 *      )
 **/
 private $peliculas;
</pre>

<p>
    En la entidad Pelicula no hacemos nada puesto que la relación en unidireccional.
</p>

<p>
    Generamos las entidades y aparecen en la entidad Actor los métodos <code>addPelicula()</code>
    <code>removePelicula()</code> y <code>getPeliculas()</code>. Y cuando actualizamos la base de
    datos aparece una tabla intermedia que implementa la relación ManyToMany con claves foráneas
    hacia las tablas Actor y Pelicula.
</p>

<h3>ManyToMany bidireccional</h3>

<p>
    Ejemplo: Actor-Pelicula, de manera que un actor pueda aparecer en varias películar y en una película
    puedan intervenir varios actores. Queremos que la relación sea bidireccional.
    implemente los métodos de acceso a Pelicula.
</p>

<p>
    Debemos añadir al atributo <code>$peliculas</code> de la entidad Actor la opción <code>inversedBy</code>
    en sus metadatos, indicando el nombre del campo en la entidad Pelicula que invierte la relación:    
</p>

<pre>
 /**
  * @ORM\ManyToMany(targetEntity="Pelicula", inversedBy="actores")
  * @ORM\JoinTable(name="actor_pelicula",
  *      joinColumns={@ORM\JoinColumn(name="actor_id", referencedColumnName="id")},
  *      inverseJoinColumns={@ORM\JoinColumn(name="pelicula_id", referencedColumnName="id")}
  *      )
  **/
private $peliculas;
</pre>

<p>
    Y en la entidad Pelicula añadimos el atributo <code>$actores</code> con los siguientes metadatos:
</p>

<pre>
/**
 * @ORM\ManyToMany(targetEntity="Actor", mappedBy="peliculas")
 */
 private $actores;
</pre>

<p>
    Generamos las entidades y aparecen en la entidad Pelicula los métodos <code>addActore()</code>,
    <code>removeActore()</code> y <code>getActores()</code>. Observa que los singulares no están 
    bien construidos desde el punto de vista de la gramática castellana. Si no te gustan así puedes
    cambiarlos tú a mano.
</p>

<p>
    Por otro lado, al actualizar la base de datos no ocurre ningún cambio. De nuevo, la direccionalidad
    no es algo que incumba a la base de datos.
</p>

<h3>Persistencia de las asociaciones</h3>

<p>
    En la <a href="http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/unitofwork-associations.html#important-concepts">
        documentación oficial</a>, Doctrine deja muy claro que <b>ante cambios (inserciones, actualizaciones y borrados)
        tan sólo chequeará la parte propietaria de la asociación</b>.
</p>

<p>
    Lo que significa que al utilizar el método <code>persist()</code> del Entity Manager, únicamente
    los cambios que se hayan realizado con los setters (<code>set{Propiedad}</code>, <code>add{Propiedad}</code>,
    <code>remove{Propiedad}</code>) de la entidad propietaria serán efectuados la base de datos.
</p>
<p>
    En el caso de las asociaciones unidireccionales no hay ningún problema pues los únicos setter que
    existen son los de la parte propietaria, pero si la asociación es bidireccional debemos asegurarnos
    de usar dichos métodos si deseamos persistir en la base de datos. Además, si queremos mantener la
    bidireccionalidad, también debemos utilizar los setters de la otra parte.
</p>
<p>
    Ilustrémoslo con un ejemplo. Si <code>$persona</code> es un objeto de la clase Persona, y
    <code>$direccion</code> lo es de la clase Direccion, y queremos asociar la dirección a la
    persona, la manera correcta de hacerlo es:
</p>

<pre>
$persona->setDireccion($direccion);  
$direccion->addPersona($persona);    
</pre>

<p>
    Aquí puedes ver un ejemplo de persistencia de asociaciones en acción. En él se 
    muestra el efecto de usar sólo los setters de la parte propietaria (persiste pero
    no mantiene la coherencia bidireccional), sólo los setters de la parte inversa
    (ni persiste ni mantienen la coherencia bidireccional) y ambos setters (persiste y
    mantiene la coherencia bidireccional).  
    involucrado en este ejemplo es:
</p>
<ul>
    <li>
        Las entidades <code>Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Persona</code>, y
        <code>Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Direccion</code>,
    </li>
    <li>
        El Controlador <code>JCSf2ORMDocrineBundle:Default:persistirRelacionesAction</code> 
    </li>   
</ul>

<div class="alert">
    <p>
        Cuando recuperamos objetos desde la base de datos a través del mecanimos de consulta de
        Doctrine (que veremos en el siguiente apartado), todos los métodos getters de las 
        entidades, tanto de la parte propietaria como de la inversa, funcionan perfectamente.
        Lo anterior tiene que ver únicamente con las operaciones de modificación.
    </p>
</div>

<h2>Las consultas DQL</h2>

<p>
    La recuperación de objetos filtrando por sus propiedades se realiza en Doctrine mediante
    un lenguaje de consulta sobre el modelo de objetos denominado DQL (Doctrine Query Language).
    Cuando se utiliza DQL es importante pensar en un repositorio de objetos en el que estamos 
    filtrando un subconjunto en lugar de hacerlo en tablas y relaciones en una base de datos.
</p>

<h2>Anatomía de una consulta DQL</h2>

<h3>Consultas de selección de objetos</h3>

<p>
    <b>Ejemplo</b>. "Dame una colección de objetos pelicula en las que participen actores cuyo nombre
    case con el patrón '%JOHN%' y cuyo año de producción sea posterior a 1980":
</p>
<pre>
SELECT p FROM JCSf2ORMDoctrineBundle:Pelicula p JOIN p.actores a WHERE a.name LIKE '%JOHN%' AND p.year > 1980
</pre>

<h4>El resultado es un array de objetos (<code>FROM</code>). </h4>

<div class="alert">
    <code>FROM JCSf2ORMDoctrineBundle:Pelicula p</code>

</div>
<p>
    El resultado de lanzar una consulta DQL sobre el repositorio de objetos, es un array
    de objetos del tipo especificado por la clausula <code>FROM</code>. De manera que esta
    define la ráiz de la consulta. Dicha clausula <code>FROM</code> siempre va seguida del 
    nombre de una entidad y del alias que le asignamos. En el ejemplo anterior, cuando
    ejecutemos la consulta, obtendremos un array de entidades <code>JCSf2ORMDoctrineBundle:Pelicula</code>.    
</p>

<h3>Las asociaciones se especifican con <code>JOIN</code></h3>

<div class="alert">
    <code>JOIN p.actores a</code>
</div>

<p>
    Mediante la palabra clave <code>JOIN</code> podemos especificar las asociaciones que 
    vayamos a necesitar en la definición del filtrado. <code>JOIN</code> va seguida de un
    atributo que es un objeto (o colección de objetos) asociado a otro objeto especificado
    por su alias y del alias que le asignamos a este nuevo objeto.
</p>

<p>
    En el ejemplo anterior <code>p</code> es el alias de la entidad <code>JCSf2ORMDoctrineBundle:Pelicula</code>,
    <code>actores</code> es una colección que está asociada a dicha entidad, y <code>a</code> es el
    alias que damos a los objetos de esta asociación, es decir, a los actores.
</p>

<h3>Establecemos filtros con <code>WHERE</code></h3>

<div class="alert">
    <code>WHERE a.name LIKE '%JOHN%' AND p.year > 1980</code>
</div>

<p>
    Una vez que tenemos alias para todos los objetos por cuyos atributos queremos
    filtrar, simplemente establecemos los filtros usando dichos alias para referirnos
    a los objetos.
</p>

<h4>Los objetos no se construyen completamente (lazzy loading y <code>SELECT</code>)</h4>

<div class="alert">
    <code>SELECT p</code>
</div>

<p>
    Como ya hemos estudiado, los objetos pueden estar asociados con otros objetos de varias 
    maneras (OneToOne, ManyToMany ...). Esto significa que construir completamente en memoria
    un sólo objeto significa construir todos los que estén asociados con él. Esto puede repetirse
    de una manera recursiva, pues a su vez un objeto asociado puede tener otros objetos asociados y
    así sucesivamente. La cantidad de objetos que se crearían dependerá de la complejidad del
    modelo de objetos.
</p>

<p>
    Por tanto, la ejecución de una consulta DQL podría producir como resultado un array excesivamente 
    grande si no fuese gracias a la aplicación del concepto de <i>lazzy loading</i>. Este consiste
    en construir parcialmente los objetos seleccionados por la consulta, de manera que los atributos
    correspondientes a las asociaciones con otros objetos se dejan vacíos. Si en un momento dado se piden
    a través de un getter del objeto, entonces se realiza una nueva consulta a la base de datos para
    construirlo.
</p>
<p>
    Con la palabra reservada <code>SELECT</code> indicamos los objetos de la asociación que queremos 
    recuperar de un tirón desde la base de datos (sin lazzy loading). En el ejemplo de DQL que
    encabeza esta sección, se está pidiendo únicamente los objetos peliculas. De manera que 
    en la construcción en memoria de los mismos se rellenarán los atributos escalares pero no
    las asociaciones.
</p>

<p>
    Si cambiamos la clausula <code>SELECT</code> por <code>SELECT p,a</code>, la consulta se 
    realizaría de manera que en una única query a la base de datos se obtendrían los datos
    suficientes para construir en memoria los objetos pelicula y los objetos actores asociados.
    De esta manera, cuando se utilice el método <code>getActores()</code> no se vuelve a consultar
    a la base de datos. 
</p>
<p>
    Cuando indicamos en el <code>SELECT</code> más de un tipo de objeto, se dice que estamos
    realizando un <i>fetch join</i>, mientras que cuando sólo especificamos uno, se dice 
    que realizamos un <i>regular join</i>.
</p>

<p>
    Por tanto la clausula <code>SELECT</code> nos permite controlar hasta que punto aplicar el
    lazzy loading en la construcción de objetos. Cuantos más objetos asociados queramos construir
    en memoria "del tirón", más necesidades de memoria tendremos. Pero si necesitamos acceder a 
    muchos de los objetos asociados estaremos ahorrando en número de consultas (provocadas por el
    lazzy loading) y, por tanto en tiempo de ejecución, pues las operaciones de entrada/salida
    son costosas en tiempo. 
</p>
<p>
    Para decidir cuántos objetos hemos de recuperar de una vez (fetch), 
    en una consulta, deberíamos analizar si, cuando dispongamos de los objetos solicitados,
    vamos a acceder algunos de sus objetos asociados con frecuencia. Si es así, la opción más
    eficiente es la de realizar un fetch join.
</p>

<h2>Consulta para la actualización y el borrado de objetos</h2>

<p>
    También podemos utilizar DQL cuando queramos borrar o actualizar varios objetos de una sola 
    vez, como alternativa a realizar un bucle en el que se llame al método <code>remove()</code>
    o <code>persist()</code> del entity manager.  
</p>
<p>
    Por otro lado, las consultas de inserción de nuevos objetos no se pueden hacer en DQL. Sólo seç
    pueden hacer con el método <code>persist</code>.
</p>

<h3>Ejemplo de borrado en bloque</h3>

<pre>
DELETE JCSf2ORMDoctrineBundle:Pelicula p WHERE p.titulo LIKE '%TIEMPO%'
</pre>

<h3>Ejemplo de actualización en bloque</h3>

<pre>
UPDATE JCSf2ORMDoctrineBundle:Pelicula p SET p.duracion=180 WHERE p.titulo LIKE '%TIEMPO%'
</pre>

<h2>Consultas DQL en la acción</h2>

<p>
    La forma más directa de realizar una consulta DQL es usando la función <code>createQuery()</code>
    del Entity Manager en la propia acción.
</p>

<pre>
public function indexAction(){

    $em = $this->getDoctrine()->getManager();
    $queryActores = $em->createQuery(
                 'SELECT a FROM JCSf2ORMDoctrineBundle:Actor a WHERE a.nombre LIKE :patron'
                )->setParameter('patron', 'A%');

    $actores = $queryActores->getResult();

    // Manejar el array $actores
    ...

}
</pre>

<p>
    Puedes verlo en funcionamiento ejecutando la acción <code>JCSf2ORMDoctrineBundle:Default:dqlAction</code>
    cuya ruta es <code>doctrine/dql</code>.
</p>

<p>
    Usando el profiler de Symfony2 sobre dicha acción y modificando la consulta DQL puedes 
    comprobar la diferencia entre realizar el fetch join y no hacerlo. La plantilla con la que
    se pinta dicha acción realiza un bucle para pintar todas las películas con sus actores
    obtenidas por la consulta <code>$queryPeliculas2</code>. Por ello, cuando se utiliza un 
    regular join, es decir, cuando se usa el lazzy loading, se realizan más de 80 consultas a la 
    base de datos. Sin embargo, si se utiliza un fetch join haciendo <code>SELECT p,a</code>,
    Se realiza sólo una consulta, disminuyendo considerablemente el tiempo de ejecución.
</p>

<h2>Los respositorios a medida</h2>

<p>
    Aunque realizar consultas directamente en la acción funciona perfectamente, no es lo más adecuado.
    Entre otras cosas por que no podemos reutilizarlas en otras acciones a menos que las dupliquemos,
    lo cual atenta contra las buenas prácticas de programación.
</p>

<p>
    El lugar correcto donde debemos construir las consultas DQL es el repositorio de cada entidad.
    Cada consulta que queramos hacer la encapsulamos en una nueva función del repositorio. Después
    podemos utilizar dichas funciones desde cualquier parte de la aplicación donde tengamos
    acceso al Entity Manager de Doctrine, por ejemplo desde una acción.
</p>
<p>
    Las clases repositorios se declaran en el mismo espacio de nombre que las entidades 
    asociadas. Si se utiliza el generador de entidades del comando <code>console</code>,
    podemos generar el esqueleto de estas clases para rellenarlo cuando lo necesitemos.
</p>

<p>
    A continuación mostramos un ejemplo de clase repositorio.
</p>
<pre>
namespace Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity;

use Doctrine\ORM\EntityRepository;

class ActorRepository extends EntityRepository {

    public function findByNombreLike($patron) {
        
        // Todos los actores cuyo nombre es como $patron
        $queryActores = $this->getEntityManager()->createQuery(
                        'SELECT a FROM JCSf2ORMDoctrineBundle:Actor a WHERE a.nombre LIKE :patron'
                )->setParameter('patron', $patron);
            

        return $queryActores->getResult();
    }       
}
</pre>

<p>
    Y así es como lo utilizamos en una acción:
</p>

<pre>
public function indexAction(){
    $em = $this->getDoctrine()->getManager();

    $repoActores = $this->getDoctrine()
                  ->getRepository('JCSf2ORMDoctrineBundle:Actor');

    $actores = $repoActores->findByNombreLike("%JOHN%");

    // Manejar el array $actores
    ...
</pre>

<p>
    En la acción  <code>JCSf2ORMDoctrineBundle:Default:dqlEnRepositorioAction</code>, 
    cuya ruta es <code>doctrine/dql_en_repositorio</code>, puedes comprobar como 
    funcionan las consultas DQL en los repositorios.
</p>

<h2>Generación mediante ingeniería inversa de los metadatos de mapeo</h2>

<p>
    En muchas ocasiones el desarrollo de una aplicación está condicionado a la
    existencia de una base de datos existente. En tal caso debemos confeccionar
    las entidades y sus metadatos de mapeo de manera que sean compatibles con
    dicha base de datos. 
</p>
<p>
    Doctrine ofrece una herramienta muy útil que, en más del 70% de los casos,
    ofrece una solución a este problema de ingeniería inversa. Aunque los metadatos
    generados por dicha herramienta no siempre sean completamente correctos, suponen
    un buen punto de partida que nos ahorra tiempo y neuronas.     
</p>

<pre>
# php app/console doctrine:mapping:import "JCSf2ORMDoctrineBundle" annotation
</pre>

<p>
    Cuando utilicemos esta herramienta hemos de tener en cuenta que existen tipos
    propios de cada sistema gestor de base de datos que Doctrine no "sabe" como
    mapear a la inversa (desde la base de datos al metadato). En tal caso la herramienta
    de ingeniería inversa fallará. La solución a este problema es indicar en la configuración
    del servicio Doctrine como deben mapearse dichos tipos.
</p>
<p>
    Un ejemplo típico es el tipo <code>enum</code> de MySQL. Docrine no "sabe" cómo debe
    mapearlo, pero nosotros podemos ayudarle añadiendo al fichero <code>app/config/config.yml</code>
    las siguientes líneas:
</p>
<pre>
doctrine:
    dbal:
        driver:   %database_driver%
        ...
        mapping_types:
          enum: string         
</pre>


<h3>Generación de un formulario asociado a una entidad de Doctrine</h3>

<p>
    En muchas ocasiones necesitaremos generar formulario (tipos) asociados a las
    entidades de nuestra aplicación. Obviamente podemos generarlos manualmente
    según lo aprendido en el tema de los formularios. Pero la herramienta <code>console</code>
    nos ofrece un comando que nos asiste automáticamente en tal tarea:
</p>

<pre>
# php app/console doctrine:generate:form JCSf2ORMDoctrineBundle:Actor
</pre>

<p>
    Si fuese necesario siempre podemos "tunear" el tipo generado para adaptarlo a las
    necesidades de la aplicación.
</p>

<h3>Generación de módulos CRUD de Doctrine</h3>

<p>
    Añadir (Create), recuperar (Retrieve), actualizar (Update) y borrar (Delete) 
    entidades es un problema que surge con frecuencia en el desarrollo de aplicaciones
    que manejen datos persistentes.
</p>

<p>
    Otro útil comando de la herramienta <code>console</code> nos genera automáticamente
    código totalmente funcional para realizar dichas operaciones, conocidas como CRUD (las
    primeras letras de cada operación).
</p>

<pre>
#php app/console generate:doctrine:crud
</pre>

<p>
    Se trata de un comando interactivo que pregunta al usuario los datos que necesita para
    la construcción del código del módulo, que consiste en:
</p>

<ul>
    <li>Un controlador asociado a la entidad (<code>{Entidad}Controller.php</code>).</li>
    <li>Un conjunto de plantillas twig para pintar las acciones del controlador anterior.
    <li>Un conjunto de rutas que deben ser importadas en el routing general de la aplicación.</li>
    <li>El tipo <code>{Entidad}Type</code>, asociado a la entidad.</li>
    <li>Un <i>TestCase</i> para añadir los test funcionales asociados al controlador.</li>
</ul>

<p>
    Si fuese necesario siempre podemos "tunear" el tipo generado para adaptarlo a las
    necesidades de la aplicación.
</p>

<h3>Subida de archivos vinculados con entidades Doctrine</h3>

{% endblock %}