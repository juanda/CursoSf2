NOTA: El JoinColumn siempre va en la parte propietaria
-------------------------------------------------------

Uno a uno unidireccional

En Actor:
/**
 * @ORM\OneToOne(targetEntity="Pelicula")
 * @ORM\JoinColumn(name="pelicula_id", referencedColumnName="id")
 */
private $pelicula;

Se crea:

public function setPelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $pelicula = null)
    
        
public function getPelicula()

En base de datos se añada pelicula_id a tabla Actor (la parte propietaria)
    
En Pelicula no pasa nada
----------------------------------------------------------

Una a una bidireccional (parte propietaria Actor)

En Actor:
/**
 * @ORM\OneToOne(targetEntity="Pelicula", inversedBy="actor")
 * @ORM\JoinColumn(name="pelicula_id", referencedColumnName="id")
 */
 private $pelicula;

En Pelicula:

/**
 * @ORM\OneToOne(targetEntity="Actor", mappedBy="pelicula")
 */
 private $actor;

En Actor se crea:
public function setPelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $pelicula = null)

public function getPelicula()
 
Y en Pelicula:

public function setActor(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Actor $actor = null)

public function getActor()

La base de datos queda igual que la anterior: la parte propietaria(actor) se queda con la foreign key
-----------------------------------------------------------------
Muchos a uno unidireccional

Queremos saber únicamente los actores que participan en una película

Hacemos a película la parte propietaria de una relación muchos a uno:

En Pelicula:

/**
 * @ORM\ManyToOne(targetEntity="Actor")
 * @ORM\JoinColumn(name="actor_id", referencedColumnName="id")
 */
private $actor;

En Actor nada

En pelicula se añade:

public function setActor(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Actor $actor = null)

public function getActor()

Y en actor nada

En la base de datos se añade actor_id a la tabla pelicula
----------------------------------------------------------------7

Uno a muchos bidireccional. Lo mismo que antes pero ahora queremos saber las peliculas de un actor

En Actor
    /**
     * @ORM\OneToMany(targetEntity="Pelicula", inversedBy="actor")
     * 
     */
    private $peliculas;

En Pelicula
/**
 * @ORM\ManyToOne(targetEntity="Actor", inversedBy="peliculas")
 * @ORM\JoinColumn(name="actor_id", referencedColumnName="id")
 */
 private $actor;

Se añaden:

En Actor:

public function addPelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $peliculas)

public function removePelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $peliculas)

public function getPeliculas()
    
Y en pelicula:

public function setActor(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Actor $actor = null)

public function getActor()

La base de datos queda igual.

--------------------------------------------------------------------

Muchos a Muchos unidirecional, siendo Actor la parte propietaria

/**
 * @ORM\ManyToMany(targetEntity="Pelicula")
 * @ORM\JoinTable(name="actor_pelicula",
 *      joinColumns={@ORM\JoinColumn(name="actor_id", referencedColumnName="id")},
 *      inverseJoinColumns={@ORM\JoinColumn(name="pelicula_id", referencedColumnName="id")}
 *      )
 */
 private $peliculas;

Se añaden 

public function addPelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $peliculas)

public function removePelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $peliculas)

public function getPeliculas()

Se añade la tabla intermedia

--------------------------------------------------------------

Muchos a muchos bidireccional

En Actor:
/**
     * @ORM\ManyToMany(targetEntity="Pelicula", inversedBy="actores")
     * @ORM\JoinTable(name="actor_pelicula",
     *      joinColumns={@ORM\JoinColumn(name="actor_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="pelicula_id", referencedColumnName="id")}
     *      )
     */
    private $peliculas;

En Pelicula:

/**
 * @ORM\ManyToMany(targetEntity="Actor", mappedBy="peliculas")
 * 
 */

Aparecen:

En Actor:

public function addPelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $peliculas)

public function removePelicula(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Pelicula $peliculas)

public function getPeliculas()

Y en Pelicula:
public function addActore(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Actor $actores)

public function removeActore(\Jazzyweb\CursoSf2\ElORMDoctrineBundle\Entity\Actor $actores)

public function getActores()

-----------------------------------------------------------------------------

Persistencia en cascada
    
